/*
 * Camera API
 * No description
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AECompensationInfo;
import io.swagger.client.model.AECompensationValue;
import io.swagger.client.model.AELockInfo;
import io.swagger.client.model.AELockValue;
import io.swagger.client.model.BaseSettingInfo;
import io.swagger.client.model.FocusMode;
import io.swagger.client.model.FocusModeInfo;
import io.swagger.client.model.FocusModeValue;
import io.swagger.client.model.ISOInfo;
import io.swagger.client.model.ISOValue;
import io.swagger.client.model.Setting;
import io.swagger.client.model.SettingInfo;
import io.swagger.client.model.SettingValue;
import org.junit.Assert;
import org.junit.Test;

import java.util.List;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private static final DefaultApi api =
            new DefaultApi(change_me, 9001);

    
    /**
     * Get image.
     *
     * Retrieve the current camera image.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void imageGetTest() throws ApiException {
        byte[] image = api.imageGet();
        System.out.printf("Image size: %d B\n", image.length);

        Assert.assertNotNull(image);
        Assert.assertTrue(image.length > 0);
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsAECOMPENSATIONGetTest() throws ApiException {
        AECompensationInfo response = api.settingsAECOMPENSATIONGet();

        validateSettingInfo(Setting.AE_COMPENSATION, response);
        Assert.assertTrue(response.getValues().contains(response.getValue()));
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsAECOMPENSATIONPutTest() throws ApiException {
        AECompensationInfo aeCompensationInfo = api.settingsAECOMPENSATIONGet();
        List<Float> values = aeCompensationInfo.getValues();
        Float newValue = values.get(0);

        AECompensationValue body = new AECompensationValue()
                .value(newValue);
        api.settingsAECOMPENSATIONPut(body);

        aeCompensationInfo = api.settingsAECOMPENSATIONGet();
        Assert.assertEquals(newValue, aeCompensationInfo.getValue());
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsAELOCKGetTest() throws ApiException {
        AELockInfo response = api.settingsAELOCKGet();

        validateSettingInfo(Setting.AE_LOCK, response);
        validateSettingValue(response);
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsAELOCKPutTest() throws ApiException {
        AELockInfo aeLockInfo = api.settingsAELOCKGet();
        boolean newValue = aeLockInfo.getValues().get(0);
        AELockValue body = new AELockValue()
                .value(newValue);

        api.settingsAELOCKPut(body);

        aeLockInfo = api.settingsAELOCKGet();
        Assert.assertEquals(newValue, aeLockInfo.getValue());
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsFOCUSMODEGetTest() throws ApiException {
        FocusModeInfo response = api.settingsFOCUSMODEGet();

        validateSettingInfo(Setting.FOCUS_MODE, response);
        validateSettingValue(response);
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsFOCUSMODEPutTest() throws ApiException {
        FocusModeInfo focusModeInfo = api.settingsFOCUSMODEGet();
        List<FocusMode> values = focusModeInfo.getValues();
        FocusMode newValue = (values.contains(FocusMode.CONTINUOUS)) ? FocusMode.CONTINUOUS : values.get(0);
        FocusModeValue body = new FocusModeValue()
                .value(newValue);
        api.settingsFOCUSMODEPut(body);

        focusModeInfo = api.settingsFOCUSMODEGet();
        Assert.assertEquals(newValue, focusModeInfo.getValue());
    }
    
    /**
     * Get settings.
     *
     * Retrieve a set of the exposed settings of the camera.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsGetTest() throws ApiException {
        List<Setting> settings = api.settingsGet();
        System.out.println(settings);

        Assert.assertNotNull(settings);
        Assert.assertTrue(settings.size() > 0);
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsISOGetTest() throws ApiException {
        ISOInfo response = api.settingsISOGet();

        validateSettingInfo(Setting.ISO, response);

        Integer value = response.getValue();
        List<Integer> values = response.getValues();
        Assert.assertTrue(values.get(0) <= value && value <= values.get(values.size() - 1));

    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(expected = ApiException.class)
    public void settingsISOPutTest() throws ApiException {
        ISOInfo isoInfo = api.settingsISOGet();
        int newValue = isoInfo.getValues().get(0);
        ISOValue body = new ISOValue()
                .value(newValue);
        api.settingsISOPut(body);
    }
    
    /**
     * Get setting info.
     *
     * Retrieve information about the specified setting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsSettingGetTest() throws ApiException {
		
        Setting setting = Setting.FOCUS_MODE;
        SettingInfo settingInfo = api.settingsSettingGet(setting);
        validateSettingInfo(setting, settingInfo);
//        Assert.assertTrue(settingInfo.getValues().contains(settingInfo.getValue()));
        validateSettingValue(settingInfo);
    }
    
    /**
     * Set setting value.
     *
     * Update the value of the specified setting. Refer to /settings/{setting} for the valid values of the specified setting. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsSettingPutTest() throws ApiException {
        Setting setting = Setting.FOCUS_MODE;
        SettingInfo settingInfo = api.settingsSettingGet(setting);
        String newValue = settingInfo.getValues().get(0);
        SettingValue body = new SettingValue()
                .value(newValue);
        api.settingsSettingPut(setting, body);

        settingInfo = api.settingsSettingGet(setting);
        Assert.assertEquals(newValue, settingInfo.getValue());
    }

    private void validateSettingInfo(Setting setting, BaseSettingInfo settingInfo) {
        System.out.println(settingInfo);

        Assert.assertNotNull(settingInfo);
        Assert.assertEquals(setting, settingInfo.getSetting());

        List values = settingInfo.getValues();
        Assert.assertFalse(values.isEmpty());
        Assert.assertFalse(values.contains(null));
    }

    private void validateSettingValue(BaseSettingInfo<?> settingInfo) {
        List<?> values = settingInfo.getValues();
        Assert.assertTrue(values.contains(settingInfo.getValue()));
    }

}
